generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  authUserId       String          @unique
  email            String          @unique
  name             String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  globalRole       GlobalRole      @default(MEMBER)
  university       String?
  memberships      Membership[]
  messagesReceived Message[]       @relation("ReceivedMessages")
  messagesSent     Message[]       @relation("SentMessages")
  rsvps            RSVP[]
  sponsorProfile   SponsorProfile?
  sponsorships     Sponsorship[]
  roles            UserRole[]
  clubs            Club[]          @relation("ClubAdmins")
}

model Club {
  id           String       @id @default(cuid())
  name         String
  university   String
  description  String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  approved     Boolean      @default(false)
  contactEmail String?
  coverImage   String?
  website      String?
  departments  Department[]
  events       Event[]
  members      Membership[]
  admins       User[]       @relation("ClubAdmins")
}

model Membership {
  id           String      @id @default(cuid())
  userId       String
  clubId       String
  role         ClubRole
  joinedAt     DateTime    @default(now())
  departmentId String?
  club         Club        @relation(fields: [clubId], references: [id])
  department   Department? @relation(fields: [departmentId], references: [id])
  user         User        @relation(fields: [userId], references: [id])

  @@unique([userId, clubId])
}

model Department {
  id        String       @id @default(cuid())
  name      String
  clubId    String
  createdAt DateTime     @default(now())
  club      Club         @relation(fields: [clubId], references: [id])
  events    Event[]
  members   Membership[]
}

model Event {
  id           String        @id @default(cuid())
  clubId       String
  title        String
  description  String?
  location     String?
  latitude     Float?
  longitude    Float?
  startDate    DateTime
  endDate      DateTime?
  createdAt    DateTime      @default(now())
  departmentId String?
  club         Club          @relation(fields: [clubId], references: [id])
  department   Department?   @relation(fields: [departmentId], references: [id])
  images       EventImage[]
  rsvps        RSVP[]
  sponsorships Sponsorship[]
}

model EventImage {
  id      String @id @default(cuid())
  url     String
  eventId String
  event   Event  @relation(fields: [eventId], references: [id])
}

model RSVP {
  id      String     @id @default(cuid())
  eventId String
  userId  String
  status  RSVPStatus @default(PENDING)
  event   Event      @relation(fields: [eventId], references: [id])
  user    User       @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
}

model SponsorProfile {
  id           String        @id @default(cuid())
  userId       String        @unique
  description  String?
  logo         String?
  name         String?
  website      String?
  user         User          @relation(fields: [userId], references: [id])
  sponsorships Sponsorship[]
}

model Sponsorship {
  id        String            @id @default(cuid())
  eventId   String
  sponsorId String
  userId    String
  amount    Float
  status    SponsorshipStatus @default(PENDING)
  createdAt DateTime          @default(now())
  payments  Payment[]
  event     Event             @relation(fields: [eventId], references: [id])
  sponsor   SponsorProfile    @relation(fields: [sponsorId], references: [id])
  user      User              @relation(fields: [userId], references: [id])
}

model Payment {
  id            String        @id @default(cuid())
  sponsorshipId String
  method        PaymentMethod
  amount        Float
  createdAt     DateTime      @default(now())
  sponsorship   Sponsorship   @relation(fields: [sponsorshipId], references: [id])
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  permissions RolePermission[]
  users       UserRole[]
}

model Permission {
  id    String           @id @default(cuid())
  name  String           @unique
  roles RolePermission[]
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@unique([roleId, permissionId])
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String
  role   Role   @relation(fields: [roleId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, roleId])
}

enum GlobalRole {
  ADMIN
  SPONSOR
  MEMBER
}

enum ClubRole {
  PRESIDENT
  TREASURER
  HR
  MARKETING
  MEMBER
  ALUMNI
}

enum RSVPStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum SponsorshipStatus {
  PENDING
  NEGOTIATION
  ACCEPTED
  REJECTED
  COMPLETED
}

enum PaymentMethod {
  BKASH
  NAGAD
  STRIPE
  PAYPAL
  PADDLE
}
